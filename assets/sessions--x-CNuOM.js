import{d as t,q as e,o as a,e as r,T as n,f as s,m as o,n as i,u as d,k as c}from"./firebase-Bz9ybdfi.js";import{f as D}from"./index-SvUTDYpM.js";const u="sessions";function w(t){const e=new Date,a=t.find(t=>!0===t.isCurrent);return a||(t.find(t=>{const a=t.startDate instanceof Date?t.startDate:t.startDate.toDate(),r=t.endDate instanceof Date?t.endDate:t.endDate.toDate();return e>=a&&e<=r})||null)}function f(t){const e=new Date,a=t.filter(t=>(t.startDate instanceof Date?t.startDate:t.startDate.toDate())>e).sort((t,e)=>{const a=t.startDate instanceof Date?t.startDate:t.startDate.toDate(),r=e.startDate instanceof Date?e.startDate:e.startDate.toDate();return a.getTime()-r.getTime()});return a.length>0?a[0]:null}async function l(){try{const s=t(D,u),o=e(s,a("startDate","asc")),i=await r(o);return i.docs.map(t=>{const e=t.data();return{id:t.id,...e,startDate:e.startDate||n.now(),endDate:e.endDate||n.now(),createdAt:e.createdAt||n.now(),updatedAt:e.updatedAt||n.now()}})}catch(s){return console.error("Error fetching sessions:",s),[]}}async function m(e){try{if(!e.name)throw new Error("Session name is required");if(!e.year)throw new Error("Year is required");if(!e.startDate||!e.endDate)throw new Error("Start and end dates are required");if(e.startDate>=e.endDate)throw new Error("Start date must be before end date");const a=await l();if(a.find(t=>t.name===e.name&&t.year===e.year))throw new Error(`Session ${e.name} ${e.year} already exists`);const r={name:e.name,year:e.year,startDate:n.fromDate(e.startDate),endDate:n.fromDate(e.endDate),isActive:!0,isCurrent:e.isCurrent||!1,createdAt:n.now(),updatedAt:n.now()};e.description&&(r.description=e.description),e.registrationDeadline&&(r.registrationDeadline=n.fromDate(e.registrationDeadline)),e.withdrawalDeadline&&(r.withdrawalDeadline=n.fromDate(e.withdrawalDeadline));const s={id:(await c(t(D,u),r)).id,...r};return await y(),s}catch(a){throw console.error("Error creating session:",a),new Error("Failed to create session: "+a.message)}}async function h(t){try{const e=await l(),a=i(D);e.forEach(t=>{if(t.id){const e=s(D,u,t.id);a.update(e,{isCurrent:!1,updatedAt:n.now()})}});const r=s(D,u,t);a.update(r,{isCurrent:!0,updatedAt:n.now()}),await a.commit()}catch(e){throw console.error("Error setting session as current:",e),new Error("Failed to set session as current")}}async function g(t,e){try{const a=s(D,u,t),r={updatedAt:n.now()};if(Object.entries(e).forEach(([t,e])=>{void 0!==e&&(r[t]="startDate"===t||"endDate"===t||"registrationDeadline"===t||"withdrawalDeadline"===t?n.fromDate(e):e)}),!0===r.isCurrent)return void(await h(t));await d(a,r),await y()}catch(a){throw console.error("Error updating session:",a),new Error("Failed to update session")}}async function p(t){try{const e=s(D,u,t);await o(e),await y()}catch(e){throw console.error("Error deleting session:",e),new Error("Failed to delete session")}}async function y(){try{const t=await l(),e=w(t),a=i(D);t.forEach(t=>{if(t.id){const r=s(D,u,t.id),o=e?.id===t.id;a.update(r,{isCurrent:o,updatedAt:n.now()})}}),await a.commit()}catch(t){console.error("Error updating current session status:",t)}}function E(t){return`${t.name} ${t.year}`}function A(t){const e=new Date,a=t.startDate instanceof Date?t.startDate:t.startDate.toDate(),r=t.endDate instanceof Date?t.endDate:t.endDate.toDate();return e>=a&&e<=r?"current":e<a?"upcoming":"past"}function S(t){const e=new Date,a=t.startDate instanceof Date?t.startDate:t.startDate.toDate(),r=t.endDate instanceof Date?t.endDate:t.endDate.toDate();if(e<a)return 0;if(e>r)return 100;const n=r.getTime()-a.getTime(),s=e.getTime()-a.getTime();return Math.round(s/n*100)}async function C(t=(new Date).getFullYear()){try{const e=await l();if(e.filter(e=>e.year===t).length>0)return void console.log(`Sessions for ${t} already exist`);const a=[{name:"Spring",startDate:new Date(t,0,15),endDate:new Date(t,4,15),description:"Spring semester session"},{name:"Summer",startDate:new Date(t,5,1),endDate:new Date(t,7,15),description:"Summer session"},{name:"Fall",startDate:new Date(t,8,1),endDate:new Date(t,11,20),description:"Fall semester session"}];for(const r of a)await m({...r,year:t});console.log(`Initialized default sessions for ${t}`)}catch(e){console.error("Error initializing default sessions:",e)}}export{A as a,E as b,l as c,w as d,f as e,p as f,S as g,m as h,C as i,h as s,g as u};
