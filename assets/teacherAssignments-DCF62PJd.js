import{f as e,e as s,a as t,_ as o}from"./index-SvUTDYpM.js";import{q as r,d as a,w as n,o as c,e as i,f as d,v as u,n as l,T as g}from"./firebase-Bz9ybdfi.js";const h="teacherAssignments";async function m(){const e=t.currentUser;if(!e)return console.log("❌ No current user found"),!1;try{console.log("🔍 Checking if user is teacher:",e.email),console.log("🔍 User UID:",e.uid);const t=await s();console.log("📊 Total users in database:",t.length),console.log("👥 All users:",t.map(e=>({id:e.id,uid:e.uid,email:e.email,role:e.role,status:e.status})));const o=t.find(s=>s.email?.toLowerCase()===e.email?.toLowerCase());console.log("📧 User found by email:",o?{id:o.id,uid:o.uid,email:o.email,role:o.role}:"Not found");const r=t.find(s=>s.uid===e.uid);console.log("🆔 User found by UID:",r?{id:r.id,uid:r.uid,email:r.email,role:r.role}:"Not found");const a=o||r;console.log("🎯 Final user found:",a?{id:a.id,uid:a.uid,email:a.email,role:a.role}:"Not found");const n="teacher"===a?.role;return console.log("✅ Is teacher?",n),n}catch(o){return console.error("❌ Error checking if user is teacher:",o),!1}}async function f(s){if(!t.currentUser)throw new Error("Must be signed in");if(!(await m()))throw new Error("Only teachers can assign courses to themselves");if((await y(s.courseId)).length>0)throw new Error("This course already has an instructor assigned");const o={...s,assignedAt:g.now(),status:"active"},r=l(e),n=d(a(e,h));r.set(n,o);const c=d(e,"courses",s.courseId);return console.log("🔧 Updating course instructor:",s.courseId,"to:",s.teacherEmail),r.update(c,{instructor:s.teacherEmail}),await r.commit(),n.id}async function w(s){try{console.log(`🔍 Fetching teacher assignments for teacherId: ${s}`);try{const t=r(a(e,h),n("teacherId","==",s),n("status","==","active"),c("assignedAt","desc")),o=await i(t),d=[];return o.forEach(e=>{d.push({id:e.id,...e.data()})}),console.log(`✅ Found ${d.length} teacher assignments with orderBy`),d}catch(t){console.log("⚠️ OrderBy query failed, trying without orderBy:",t);const o=r(a(e,h),n("teacherId","==",s),n("status","==","active")),c=await i(o),d=[];return c.forEach(e=>{d.push({id:e.id,...e.data()})}),d.sort((e,s)=>{const t=e.assignedAt instanceof Date?e.assignedAt.getTime():1e3*e.assignedAt?.seconds||0;return(s.assignedAt instanceof Date?s.assignedAt.getTime():1e3*s.assignedAt?.seconds||0)-t}),console.log(`✅ Found ${d.length} teacher assignments without orderBy`),d}}catch(o){return console.error(`❌ Error fetching teacher assignments for ${s}:`,o),[]}}async function y(s){const t=r(a(e,h),n("courseId","==",s),n("status","==","active"),c("assignedAt","desc")),o=await i(t),d=[];return o.forEach(e=>{d.push({id:e.id,...e.data()})}),d}async function E(s){if(!t.currentUser)throw new Error("Must be signed in");if(!(await m()))throw new Error("Only teachers can remove their course assignments");const o=d(e,h,s),r=await u(o);if(!r.exists())throw new Error("Assignment not found");const a=r.data(),n=l(e);n.update(o,{status:"inactive",updatedAt:g.now()});const c=d(e,"courses",a.courseId);console.log("🔧 Clearing course instructor:",a.courseId,"setting to: TBD"),n.update(c,{instructor:"TBD"}),await n.commit()}async function p(e){return 0===(await y(e)).length}async function $(){try{console.log("🔍 Debugging teacher assignments...");const s=await async function(){const s=r(a(e,h),n("status","==","active"),c("assignedAt","desc")),t=await i(s),o=[];return t.forEach(e=>{o.push({id:e.id,...e.data()})}),o}();return console.log("📊 Total teacher assignments in DB:",s.length),s.forEach((e,s)=>{console.log(`  ${s+1}. Teacher: ${e.teacherEmail}, Course: ${e.courseCode}, Status: ${e.status}, TeacherID: ${e.teacherId}`)}),s}catch(s){return console.error("❌ Error debugging teacher assignments:",s),[]}}async function I(s){try{console.log(`🔍 Checking assignments for teacher ID: ${s}`);const t=r(a(e,h),n("teacherId","==",s),n("status","==","active")),o=await i(t),c=[];return o.forEach(e=>{c.push({id:e.id,...e.data()})}),console.log(`✅ Found ${c.length} assignments for teacher ${s}:`,c),c}catch(t){return console.error(`❌ Error checking teacher assignments for ${s}:`,t),[]}}async function D(s,t,r){try{console.log(`👨‍🏫 Assigning teacher ${t} to course ${r}...`);const{getDoc:n,doc:c,addDoc:i,writeBatch:d,Timestamp:u}=await o(async()=>{const{getDoc:e,doc:s,addDoc:t,writeBatch:o,Timestamp:r}=await import("./firebase-Bz9ybdfi.js").then(e=>e.D);return{getDoc:e,doc:s,addDoc:t,writeBatch:o,Timestamp:r}},[]),l=await n(c(e,"courses",r));if(!l.exists())throw new Error(`Course ${r} not found`);const g=l.data();if((await y(r)).length>0)throw new Error("This course already has an instructor assigned");const m={teacherId:s,teacherEmail:t,courseId:r,courseCode:g.code,courseTitle:g.title,semester:g.semester||"Unknown",assignedAt:u.now(),status:"active"},f=d(e),w=c(a(e,h));f.set(w,m);const E=c(e,"courses",r);return console.log("🔧 Updating course instructor:",r,"to:",t),f.update(E,{instructor:t}),await f.commit(),console.log(`✅ Teacher assigned successfully with ID: ${w.id}`),w.id}catch(n){throw console.error("❌ Error assigning teacher to course:",n),n}}async function A(){try{console.log("🎯 Creating sample teacher assignments...");const o=(await s()).filter(e=>"teacher"===e.role),r=await i(a(e,"courses"));if(0===o.length)return void console.log("❌ No teachers found in database");if(r.empty)return void console.log("❌ No courses found in database");const n=r.docs.map(e=>({id:e.id,...e.data()}));for(let e=0;e<o.length;e++){const s=o[e],r=n.slice(2*e,2*(e+1));for(const e of r)try{const t={teacherId:s.id,teacherEmail:s.email,courseId:e.id,courseCode:e.code||`COURSE${e.id.slice(0,4)}`,courseTitle:e.title||`Course ${e.id.slice(0,8)}`,semester:e.semester||"MD-1"};await f(t),console.log(`✅ Created assignment: ${s.email} -> ${e.title}`)}catch(t){console.log(`⚠️ Assignment already exists or error: ${s.email} -> ${e.title}`)}}console.log("🎉 Sample teacher assignments created successfully!")}catch(t){throw console.error("Error creating sample teacher assignments:",t),t}}export{D as a,I as b,f as c,$ as d,A as e,w as g,p as i,E as r};
