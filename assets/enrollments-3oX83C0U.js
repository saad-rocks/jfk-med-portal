const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-SvUTDYpM.js","assets/react-c0U51vzo.js","assets/firebase-Bz9ybdfi.js","assets/icons-C41eJsKq.js","assets/index-IxlbvR3_.css"])))=>i.map(i=>d[i]);
import{f as e,a as t,_ as n}from"./index-SvUTDYpM.js";import{d as o,w as s,q as r,e as a,k as l,m as c,f as d,v as i,u}from"./firebase-Bz9ybdfi.js";import"./react-c0U51vzo.js";import"./icons-C41eJsKq.js";const m=new Map,g=3e5,h=new Map;async function f(e){try{console.log("üîç Diagnosing enrollment data for course:",e);const t=[],n=new Set,o=[],s=(await p()).filter(t=>t.courseId===e);return console.log("üìä Found",s.length,"enrollments for course"),s.forEach(e=>{n.add(e.studentId),o.length<10&&o.push(e),e.studentId&&""!==e.studentId.trim()||t.push(`Empty studentId in enrollment ${e.id}`)}),{totalEnrollments:s.length,uniqueStudentIds:Array.from(n),sampleEnrollments:o,issues:t}}catch(t){return console.error("Error diagnosing enrollment data:",t),{totalEnrollments:0,uniqueStudentIds:[],sampleEnrollments:[],issues:[`Diagnostic error: ${t instanceof Error?t.message:"Unknown error"}`]}}}async function w(n){if(!t.currentUser)throw new Error("Must be signed in");try{const t=await l(o(e,"enrollments"),{studentId:n.studentId,courseId:n.courseId,semesterId:n.semesterId,status:n.status??"enrolled",createdAt:Date.now()});return m.delete(`student_${n.studentId}`),m.delete(`course_${n.courseId}`),t.id}catch(s){throw console.error("Error creating enrollment:",s),new Error("Failed to create enrollment")}}async function p(t){const n=o(e,"enrollments");let l=n;const c=[];t?.courseId&&c.push(s("courseId","==",t.courseId)),t?.semesterId&&c.push(s("semesterId","==",t.semesterId)),c.length>0&&(l=r(n,...c));const d=await a(l),i=[];return d.forEach(e=>i.push({id:e.id,...e.data()})),i}async function $(e){try{const t=`course_enrollments_with_details_${e}`,o=m.get(t);if(o&&Date.now()-o.timestamp<g)return o.data;const s=(await p({courseId:e})).filter(e=>"enrolled"===e.status);if(0===s.length)return m.set(t,{data:[],timestamp:Date.now()}),[];let r;const a="all_users",l=h.get(a);if(l&&Date.now()-l.timestamp<6e5)r=l.data;else{const{getAllUsers:e}=await n(async()=>{const{getAllUsers:e}=await import("./index-SvUTDYpM.js").then(e=>e.p);return{getAllUsers:e}},__vite__mapDeps([0,1,2,3,4]));r=await e(),h.set(a,{data:r,timestamp:Date.now()})}const c=new Map(r.map(e=>[e.id,e])),d=s.map(e=>{const t=c.get(e.studentId);return{...e,studentName:t?.name||t?.email||"Unknown Student",studentEmail:t?.email||"",studentMdYear:t?.mdYear||"MD-1"}});return m.set(t,{data:d,timestamp:Date.now()}),d}catch(t){return console.error("Error getting enrollments with student details:",t),[]}}async function E(t){try{const n=`student_${t}`,l=m.get(n);if(l&&Date.now()-l.timestamp<g)return l.data;const c=r(o(e,"enrollments"),s("studentId","==",t)),d=await a(c),i=[];return d.forEach(e=>i.push({id:e.id,...e.data()})),m.set(n,{data:i,timestamp:Date.now()}),i}catch(n){throw console.error("Error fetching enrollments for student:",n),new Error("Failed to fetch student enrollments")}}async function I(t,n){try{await u(d(e,"enrollments",t),{status:n}),m.clear()}catch(o){throw console.error("Error updating enrollment status:",o),new Error("Failed to update enrollment status")}}async function y(t){try{await c(d(e,"enrollments",t)),m.clear()}catch(n){throw console.error("Error deleting enrollment:",n),new Error("Failed to delete enrollment")}}async function D(t){const n=await i(d(e,"courses",t));return n.exists()?{id:n.id,...n.data()}:null}async function _(){try{console.log("üîç Debugging all enrollments...");const e=await p();return console.log("üìä Total enrollments in DB:",e.length),e.forEach((e,t)=>{console.log(`  ${t+1}. Student: ${e.studentId}, Course: ${e.courseId}, Status: ${e.status}`)}),e}catch(e){return console.error("‚ùå Error debugging enrollments:",e),[]}}async function S(){try{console.log("üîç Checking database state...");const t=(await a(o(e,"courses"))).docs.map(e=>({id:e.id,...e.data()}));console.log(`üìö Courses in DB: ${t.length}`),t.forEach(e=>console.log(`  - ${e.title} (${e.id})`));const n=(await a(o(e,"users"))).docs.map(e=>({id:e.id,...e.data()}));console.log(`üë• Total users in DB: ${n.length}`);const s=n.filter(e=>"student"===e.role),r=n.filter(e=>"teacher"===e.role),l=n.filter(e=>"admin"===e.role);console.log(`üéì Students: ${s.length}`),s.forEach(e=>console.log(`  - ${e.name} (${e.id}, uid: ${e.uid})`)),console.log(`üë®‚Äçüè´ Teachers: ${r.length}`),r.forEach(e=>console.log(`  - ${e.name} (${e.id}, uid: ${e.uid})`)),console.log(`üëë Admins: ${l.length}`),l.forEach(e=>console.log(`  - ${e.name} (${e.id}, uid: ${e.uid})`));const c=await p();console.log(`üìù Enrollments in DB: ${c.length}`);const d={};c.forEach(e=>{d[e.courseId]||(d[e.courseId]=[]),d[e.courseId].push(e.studentId)}),Object.entries(d).forEach(([e,n])=>{const o=t.find(t=>t.id===e);console.log(`  üìö Course: ${o?.title||e} (${n.length} students)`),n.forEach(e=>{const t=s.find(t=>t.id===e);console.log(`    üë§ ${t?.name||"Unknown"} (${e})`)})})}catch(t){console.error("‚ùå Error debugging database state:",t)}}async function b(){try{console.log("üéØ Creating sample enrollments...");const n=await a(o(e,"courses")),c=await a(r(o(e,"users"),s("role","==","student"))),d=n.docs.map(e=>({id:e.id,...e.data()})),i=c.docs.map(e=>({id:e.id,...e.data()}));if(console.log(`Found ${d.length} courses and ${i.length} students`),console.log("Courses:",d.map(e=>({id:e.id,title:e.title}))),console.log("Students:",i.map(e=>({id:e.id,uid:e.uid,name:e.name,email:e.email}))),0===d.length)return void console.log("‚ùå No courses found. Please create some courses first.");if(0===i.length)return void console.log("‚ùå No students found. Please create some student users first.");for(const s of d.slice(0,Math.min(3,d.length))){const n=i.slice(0,Math.min(5,i.length));console.log(`\nüìö Processing course: ${s.title} (${s.id})`),console.log(`üë• Enrolling ${n.length} students`);for(const r of n)try{const t={studentId:r.id,courseId:s.id,semesterId:"current-semester",status:"enrolled",createdAt:Date.now()};console.log(`‚ûï Creating enrollment: Student ${r.name} (${r.id}) -> Course ${s.title} (${s.id})`),await l(o(e,"enrollments"),t)}catch(t){console.error(`‚ùå Error creating enrollment for student ${r.name}:`,t)}}console.log("\n‚úÖ Sample enrollments created successfully!"),console.log("üîÑ Please refresh the page to see the updated enrollment counts.")}catch(t){throw console.error("‚ùå Error creating sample enrollments:",t),t}}export{w as createEnrollment,b as createSampleEnrollments,S as debugDatabaseState,_ as debugEnrollments,y as deleteEnrollment,f as diagnoseEnrollmentData,D as getCourseById,$ as getEnrollmentsWithStudentDetails,p as listEnrollments,E as listEnrollmentsForStudent,I as updateEnrollmentStatus};
