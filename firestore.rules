rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function role() { return request.auth.token.role; }
    function isAdmin() { return isSignedIn() && role() == 'admin'; }
    function isTeacher() { return isSignedIn() && role() == 'teacher'; }
    function isStudent() { return isSignedIn() && role() == 'student'; }
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }

    // Courses collection rules
    match /courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function role() {
        return request.auth.token.role;
      }

      function isAdmin() {
        return role() == 'admin';
      }

      function isTeacher() {
        return role() == 'teacher';
      }

      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.ownerId;
      }

      // All signed-in users can read courses
      allow get, list: if isSignedIn();

      // Create: any authenticated user can create (for demo purposes)
      // TODO: Restrict to admin/teacher once proper claims are set up
      allow create: if isSignedIn();

      // Update/Delete: admin can modify any; teacher only if owner
      allow update, delete: if isSignedIn() && (isAdmin() || (isTeacher() && isOwner()));
    }

    // Enrollments collection rules
    match /enrollments/{enrollmentId} {
      // Read access - any authenticated user can read (for demo purposes)
      // TODO: Restrict to proper roles once claims are set up
      allow get, list: if isSignedIn();

      // Write access - any authenticated user can create (for demo purposes)
      // TODO: Restrict to proper roles once claims are set up
      allow create, update, delete: if isSignedIn();
    }

    // Assignments collection rules
    match /assignments/{id} {
      allow read: if isSignedIn();
      // Allow any authenticated user to create/update/delete (for demo purposes)
      // TODO: Restrict to proper roles once claims are set up
      allow create, update, delete: if isSignedIn();
    }

    // Submissions collection rules
    match /submissions/{id} {
      allow read: if isSignedIn();
      // Allow any authenticated user to create/update/delete (for demo purposes)
      // TODO: Restrict to proper roles once claims are set up
      allow create, update, delete: if isSignedIn();
    }

    // Users collection rules
    match /users/{userId} {
      // Read access - users can read their own profile, admins can read all
      allow get: if isSignedIn() && (request.auth.uid == resource.data.uid || isAdmin());
      
      // List access - only admins can list all users
      allow list: if isSignedIn(); // Temporarily allow all for demo
      
      // Create access - only admins can create users (for user management)
      allow create: if isSignedIn(); // Temporarily allow all for demo
      
      // Update access - users can update their own profile, admins can update any
      allow update: if isSignedIn() && (request.auth.uid == resource.data.uid || isAdmin());
      
      // Delete access - only admins can delete users
      allow delete: if isSignedIn(); // Temporarily allow all for demo
    }
  }
}


