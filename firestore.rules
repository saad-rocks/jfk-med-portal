rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    
    function isAdmin() {
      return request.auth.token.email == 'admin@jfkmedical.edu' ||
             request.auth.token.email == 'admin@jfk.edu' ||
             request.auth.token.email == 'admin@test.com' ||
             request.auth.token.email == 'saadshah2000@gmail.com' ||
             (request.auth.token.email is string && request.auth.token.email.matches('.*admin.*'));
    }
    
    function isTeacher() { 
      return isSignedIn() && (
        request.auth.token.email == 'Dos@jfk.com' ||
        request.auth.token.email == 'dos@jfk.com' ||
        (request.auth.token.email is string && request.auth.token.email.matches('.*teacher.*')) ||
        (request.auth.token.email is string && request.auth.token.email.matches('.*@jfk.*')) ||
        (request.auth.token.email is string && request.auth.token.email.matches('.*@gmail.*'))
      );
    }
    
    function isStudent() { 
      return isSignedIn() && (
        request.auth.token.email == 'saadshah2000@gmail.com' ||
        (request.auth.token.email is string && request.auth.token.email.matches('.*student.*'))
      );
    }
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }

    // Courses collection rules
    match /courses/{courseId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.ownerId;
      }

      // All signed-in users can read courses
      allow get, list: if isSignedIn();

      // Create: any authenticated user can create (for demo purposes)
      // TODO: Restrict to admin/teacher once proper claims are set up
      allow create: if isSignedIn();

      // Update/Delete: admin can modify any; teacher can update instructor field
      allow update, delete: if isSignedIn() && (isAdmin() || (isTeacher() && isOwner()) || 
        (isTeacher() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['instructor'])) || isTeacher());
    }

    // Enrollments collection rules
    match /enrollments/{enrollmentId} {
      // Read access - any authenticated user can read (for demo purposes)
      // TODO: Restrict to proper roles once claims are set up
      allow get, list: if isSignedIn();

      // Write access - any authenticated user can create (for demo purposes)
      // TODO: Restrict to proper roles once claims are set up
      allow create, update, delete: if isSignedIn();
    }

    // Assignments collection rules
    match /assignments/{id} {
      allow read: if isSignedIn();
      // Allow any authenticated user to create/update/delete (for demo purposes)
      // TODO: Restrict to proper roles once claims are set up
      allow create, update, delete: if isSignedIn();
    }

    // Submissions collection rules
    match /submissions/{id} {
      allow read: if isSignedIn();
      // Allow any authenticated user to create/update/delete (for demo purposes)
      // TODO: Restrict to proper roles once claims are set up
      allow create, update, delete: if isSignedIn();
    }

    // Users collection rules
    match /users/{userId} {
      // Read access - users can read their own profile, admins can read all
      allow get: if isSignedIn() && (request.auth.uid == resource.data.uid || isAdmin());
      
      // List access - only admins can list all users
      allow list: if isSignedIn(); // Temporarily allow all for demo
      
      // Create access - only admins can create users (for user management)
      allow create: if isSignedIn(); // Temporarily allow all for demo
      
      // Update access - users can update their own profile, admins can update any
      allow update: if isSignedIn() && (request.auth.uid == resource.data.uid || isAdmin());
      
      // Delete access - only admins can delete users
      allow delete: if isSignedIn(); // Temporarily allow all for demo
    }

    // Sessions collection rules
    match /sessions/{sessionId} {
      // Read access - all authenticated users can read sessions (for dashboard display)
      allow get, list: if isSignedIn();
      
      // Write access - only admins can create, update, and delete sessions
      allow create, update, delete: if isSignedIn(); // Temporarily allow all for demo
      // TODO: Restrict to admin only once proper claims are set up: allow create, update, delete: if isAdmin();
    }

    // Teacher Assignments collection rules
    match /teacherAssignments/{assignmentId} {
      // Read access - any authenticated user can read
      allow get, list: if isSignedIn();

      // Write access - any authenticated user can manage (temporarily permissive)
      allow create, update, delete: if isSignedIn();
    }
  }
}


