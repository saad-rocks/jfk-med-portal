rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    
    function isAdmin() {
      return request.auth.token.email == 'admin@jfkmedical.edu' ||
             request.auth.token.email == 'admin@jfk.edu' ||
             request.auth.token.email == 'admin@test.com' ||
             request.auth.token.email == 'saadshah2000@gmail.com' ||
             (request.auth.token.email is string && request.auth.token.email.matches('.*admin.*'));
    }
    
    function isTeacher() { 
      return isSignedIn() && (
        request.auth.token.email == 'Dos@jfk.com' ||
        request.auth.token.email == 'dos@jfk.com' ||
        (request.auth.token.email is string && request.auth.token.email.matches('.*teacher.*')) ||
        (request.auth.token.email is string && request.auth.token.email.matches('.*@jfk.*')) ||
        (request.auth.token.email is string && request.auth.token.email.matches('.*@gmail.*'))
      );
    }
    
    function isStudent() { 
      return isSignedIn() && (
        request.auth.token.email == 'saadshah2000@gmail.com' ||
        (request.auth.token.email is string && request.auth.token.email.matches('.*student.*'))
      );
    }
    // Default deny - but allow seeding operations for development
    match /{document=**} {
      allow read, write: if false;
    }

    // Courses collection rules
    match /courses/{courseId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.ownerId;
      }

      // All signed-in users can read courses
      allow get, list: if isSignedIn();

      // Create: any authenticated user can create (for demo purposes)
      // TODO: Restrict to admin/teacher once proper claims are set up
      allow create: if isSignedIn();

      // Update/Delete: admin can modify any; teachers may modify their own courses; non-owner teachers may update only instructor
      allow update, delete: if isSignedIn() && (
        isAdmin() ||
        (isTeacher() && isOwner()) ||
        (isTeacher() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['instructor']))
      );
    }

    // Enrollments collection rules
    match /enrollments/{enrollmentId} {
      // Read access - any authenticated user can read (for demo purposes)
      // TODO: Restrict to proper roles once claims are set up
      allow get, list: if isSignedIn();

      // Write access - any authenticated user can create (for demo purposes)
      // TODO: Restrict to proper roles once claims are set up
      allow create, update, delete: if isSignedIn();
    }

    // Assignments collection rules
    match /assignments/{id} {
      allow read: if isSignedIn();
      // Allow any authenticated user to create/update/delete (for demo purposes)
      // TODO: Restrict to proper roles once claims are set up
      allow create, update, delete: if isSignedIn();
    }

    // Submissions collection rules
    match /submissions/{id} {
      allow read: if isSignedIn();
      // Allow any authenticated user to create/update/delete (for demo purposes)
      // TODO: Restrict to proper roles once claims are set up
      allow create, update, delete: if isSignedIn();
    }

    // Users collection rules
    match /users/{userId} {
      // Read access - users can read their own profile, admins can read all
      allow get: if isSignedIn() && (request.auth.uid == resource.data.uid || isAdmin());
      
      // List access - only admins can list all users
      allow list: if isSignedIn(); // Temporarily allow all for demo
      
      // Create access - any authenticated user can create (for seeding and demo)
      allow create: if isSignedIn();
      
      // Update access - users can update their own profile, admins can update any
      allow update: if isSignedIn() && (request.auth.uid == resource.data.uid || isAdmin());
      
      // Delete access - any authenticated user can delete (for seeding cleanup)
      allow delete: if isSignedIn();
    }

    // Sessions collection rules
    match /sessions/{sessionId} {
      // Read access - all authenticated users can read sessions (for dashboard display)
      allow get, list: if isSignedIn();
      
      // Write access - only admins can create, update, and delete sessions
      allow create, update, delete: if isSignedIn(); // Temporarily allow all for demo
      // TODO: Restrict to admin only once proper claims are set up: allow create, update, delete: if isAdmin();
    }

    // Teacher Assignments collection rules
    match /teacherAssignments/{assignmentId} {
      // Read access - any authenticated user can read
      allow get, list: if isSignedIn();

      // Write access - any authenticated user can manage (temporarily permissive)
      allow create, update, delete: if isSignedIn();
    }

    // Class Sessions collection rules (for seeding)
    match /classSessions/{sessionId} {
      allow read, write: if isSignedIn();
    }

         // Announcements collection rules (for seeding)
     match /announcements/{announcementId} {
       allow read, write: if isSignedIn();
     }
     
         // Clinical Assessments collection rules
    match /clinicalAssessments/{assessmentId} {
      allow read, write: if isSignedIn();
    }

    // Attendance collection rules
    match /attendance/{recordId} {
      // Read access - authenticated users can read attendance records
      allow get, list: if isSignedIn();

      // Write access - authenticated users can create attendance records
      // Teachers and admins can update attendance records
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn(); // Temporarily allow all for demo
      // TODO: Restrict to admin/teacher for updates once proper claims are set up
    }

    // Time Entries collection rules (for time tracking - faculty and employees only)
    match /timeEntries/{entryId} {
      // Read access - only teachers/admins can read their own entries, admins can read all
      allow get: if isSignedIn() && (isTeacher() || isAdmin()) && (request.auth.uid == resource.data.userId || isAdmin());
      allow list: if isSignedIn() && (isTeacher() || isAdmin()) && (request.auth.uid == resource.data.userId || isAdmin());

      // Write access - only teachers/admins can create their own entries, admins can do anything
      allow create: if isSignedIn() && (isTeacher() || isAdmin()) && (request.auth.uid == request.resource.data.userId || isAdmin());
      allow update, delete: if isSignedIn() && (isTeacher() || isAdmin()) && (request.auth.uid == resource.data.userId || isAdmin());
    }

    // Time Sessions collection rules (for active time tracking sessions - faculty and employees only)
    match /timeSessions/{sessionId} {
      // Read access - only teachers/admins can read their own sessions, admins can read all
      allow get: if isSignedIn() && (isTeacher() || isAdmin()) && (request.auth.uid == resource.data.userId || isAdmin());
      allow list: if isSignedIn() && (isTeacher() || isAdmin()) && (request.auth.uid == resource.data.userId || isAdmin());

      // Write access - only teachers/admins can create/manage their own sessions, admins can do anything
      allow create: if isSignedIn() && (isTeacher() || isAdmin()) && (request.auth.uid == request.resource.data.userId || isAdmin());
      allow update, delete: if isSignedIn() && (isTeacher() || isAdmin()) && (request.auth.uid == resource.data.userId || isAdmin());
    }
  }
}


